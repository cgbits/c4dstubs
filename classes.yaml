BaseList2D(GeListNode):
  attributes: []
  functions:
    SetUserDataContainer:
    - self
    - 'descid: DescID'
    - 'datadescription: BaseContainer'
    - '->: bool'
BaseObject(BaseList2D):
  attributes: []
  functions:
    AddDependence:
    - self
    - 'hh: Any'
    - 'op: BaseObject'
    - 'dirtyflags: int'
    - '->: Any'
    CheckCache:
    - self
    - 'hh: Any'
    - '->: bool'
    GetAndCheckHierarchyClone:
    - self
    - 'hh: Any'
    - 'op: BaseObject'
    - 'flags: int'
    - 'allchildren: bool'
    - 'dirty: bool'
    - 'trans: AliasTrans'
    - '->: Any'
    GetCache:
    - self
    - 'hh: Any'
    - '->: BaseObject'
    GetHierarchyClone:
    - self
    - 'hh: Any'
    - 'op: BaseObject'
    - 'flags: int'
    - 'dirty: bool'
    - 'trans: AliasTrans'
    - 'dirtyflags: int'
    - '->: Any'
ByteSeq(object):
  attributes: []
  functions:
    __init__:
    - self
    - 'buf: Any'
    - 'len: int'
    - 'readonly: bool'
    - '->: ByteSeq'
    __iter__:
    - self
    - '->: Iterable[str]'
C4D_Falloff(object):
  attributes: []
  functions:
    MultiSample:
    - self
    - 'points: List[Vector]'
    - 'usespline: bool'
    - 'weight: Optional[float] = ...'
    - '->: List[float]'
CAWeightMgr(object):
  attributes: []
  functions:
    GetAutoWeightAlgoId:
    - self
    - 'doc: BaseDocument'
    - 'index: int'
    - '->: int'
    GetAutoWeightAlgoIndex:
    - self
    - 'doc: BaseDocument'
    - 'stringId: int'
    - '->: int'
    GetAutoWeightDictionary:
    - self
    - 'doc: BaseDocument'
    - 'stringId: int'
    - '->: Any'
    SetAutoWeightDictionary:
    - self
    - 'doc: BaseDocument'
    - 'dataDictionary: Any'
    - 'stringId: int'
    - '->: bool'
ColorSwatchData(object):
  attributes: []
  functions:
    AddGroup:
    - self
    - 'category: Optional[int] = ...'
    - 'name: Optional[str] = ...'
    - 'selected: Optional[bool] = ...'
    - 'insertAt: Optional[int] = ...'
    - 'colors: Optional[Any] = ...'
    - '->: ColorSwatchGroup'
ColorSwatchGroup(object):
  attributes: []
  functions:
    AddColor:
    - self
    - 'color: Any'
    - 'selected: Vector'
    - 'insertAt: Vector'
    - '->: int'
    AddColors:
    - self
    - 'colors: Any'
    - 'selected: bool'
    - 'merge: bool'
    - 'insertAt: int'
    - '->: int'
    GetColor:
    - self
    - 'index: int'
    - '->: Any'
    GetColors:
    - self
    - 'selectedOnly: bool'
    - '->: Any'
    SetColor:
    - self
    - 'index: int'
    - 'color: Any'
    - 'selected: int'
    - '->: bool'
    __init__:
    - self
    - 'name: str'
    - 'selected: bool'
    - 'colors: Any'
    - '->: ColorSwatchGroup'
GeClipMap(object):
  attributes: []
  functions:
    GetDim:
    - self
    - '->: Tuple[int, int]'
GeListNode(C4DAtom):
  attributes: []
  functions:
    GetBranchInfo:
    - self
    - 'flags: int'
    - '->: List[Dict[str, Any]]'
    GetDown:
    - self
    - '->: Optional[GeListNode] = ...'
    GetDownLast:
    - self
    - '->: Optional[GeListNode] = ...'
    GetNext:
    - self
    - '->: Optional[GeListNode] = ...'
    GetPred:
    - self
    - '->: Optional[GeListNode] = ...'
    GetUp:
    - self
    - '->: Optional[GeListNode] = ...'
GeUserArea(object):
  attributes: []
  functions:
    DrawBezier:
    - self
    - 'sx: float'
    - 'sy: float'
    - 'p: List[float]'
    - 'closed: bool'
    - 'filled: bool'
    - '->: None'
Gradient(CustomDataType):
  attributes: []
  functions:
    GetData:
    - self
    - 'id: int'
    - '->: Any'
    SetData:
    - self
    - 'id: int'
    - 'data: Any'
    - '->: Any'
InstanceObject(BaseObject):
  attributes: []
  functions:
    SetInstanceColors:
    - self
    - 'colors: List[Vector]'
    - '->: bool'
    SetInstanceMatrices:
    - self
    - 'matrices: List[Matrix]'
    - '->: bool'
Matrix:
  attributes:
  - 'off: Vector'
  - 'v1: Vector'
  - 'v2: Vector'
  - 'v3: Vector'
  functions: {}
MoData(object):
  attributes: []
  functions:
    GetFalloffs:
    - self
    - '->: List[float]'
NodeData(BaseData):
  attributes: []
  functions:
    GetDDescription:
    - self
    - 'node: GeListNode'
    - 'description: Description'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, int]]'
    GetDParameter:
    - self
    - 'node: GeListNode'
    - 'id: DescID'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, Any, int]]'
    SetDParameter:
    - self
    - 'node: GeListNode'
    - 'id: DescID'
    - 't_data: Any'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, int]]'
ObjectData(NodeData):
  attributes: []
  functions:
    GetContour:
    - self
    - 'op: BaseObject'
    - 'doc: BaseDocument'
    - 'lod: int'
    - 'bt: BaseThread'
    - '->: Optional[SplineObject] = ...'
    GetVirtualObjects:
    - self
    - 'op: BaseObject'
    - 'hh: Any'
    - '->: BaseObject'
PointObject(BaseObject):
  attributes: []
  functions:
    CalcVertexMap:
    - self
    - 'modifier: BaseObject'
    - '->: List[float]'
PolygonObject(PointObject):
  attributes: []
  functions:
    CreatePhongNormals:
    - self
    - '->: List[Vector]'
    GetNGonTranslationMap:
    - self
    - 'ngoncnt: int'
    - 'polymap: List[int]'
    - '->: List[int]'
TP_MasterSystem(BaseList2D):
  attributes: []
  functions:
    GetParticles:
    - self
    - 'all: bool'
    - '->: List[int]'
    GetVirtualObjects:
    - self
    - 'ingroup: TP_PGroup'
    - 'inRender: bool'
    - 'subgroups: bool'
    - 'hh: Any'
    - '->: BaseObject'
TempUVHandle(object):
  attributes: []
  functions:
    GetUVW:
    - self
    - '->: List[Dict[str, Any]]'
    SetUVW:
    - self
    - 'uvw: List[Dict[str, Any]]'
    - '->: bool'
    SetUVWFromTextureView:
    - self
    - 'uvw: List[Dict[str, Any]]'
    - 'ignoreHidden: bool'
    - 'ignoreUnselected: bool'
    - 'autoSelectAll: bool'
    - 'registerUndo: bool'
    - '->: bool'
ToolData(BaseData):
  attributes: []
  functions:
    GetDDescription:
    - self
    - 'doc: BaseDocument'
    - 'data: BaseContainer'
    - 'description: Description'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, int]]'
    GetDParameter:
    - self
    - 'doc: BaseDocument'
    - 'data: BaseContainer'
    - 'id: DescID'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, Any, int]]'
    SetDParameter:
    - self
    - 'doc: BaseDocument'
    - 'data: BaseContainer'
    - 'id: DescID'
    - 't_data: Any'
    - 'flags: int'
    - '->: Union[bool, Tuple[bool, int]]'
Vector(object):
  attributes:
  - 'x: float'
  - 'y: float'
  - 'z: float'
  functions:
    __mul__:
    - self
    - 'other: Matrix'
    - '->: Union[Vector, float]'
